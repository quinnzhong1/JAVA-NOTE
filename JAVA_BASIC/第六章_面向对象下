# 第六章 面向对象下

## static关键字

* **定义**
  * 某些特定数据在内存空间只有一份，专属于类的变量、方法、代码块、内部类，不需要new新的instance即可访问或者使用
  * 存在方法区的静态域
* **静态变量**
  * **静态属性 & 非静态属性（实例属性）**
    * 静态属性
      * 创造了类的对象，多个对象共享同一个静态变量，其中一个对象改了静态变量，其他对象静态变量也是修改过的
    * 实际变量
      * 每个对象有独立的一套类中的非静态属性，其他对象不能改其他的对象的非静态属性
  * **static属性其他说明**
    * 静态变量随着类的加载而加载
    * 加载早于对象的创建
  * **举例**
    * `Syetem.out`
    * `Math.PI`
  * **静态变量内存解析**
    ![](picture/static_field_memory.png)
  * **需要用的静态属性的场合**
    * 属性可以被多个对象共享
    * 类中常量
* **静态方法**
  * **调用**
    * `class.staticMethod()`的方式调用
  * **静态方法与非静态方法**
    * 静态方法只能调用静态方法和属性
    * 非静态方法都能调用
  * **注意**
    * 静态方法不能使用this或者super
  * **需要用的静态方法的场合**
    * 工具类方法 - 不需要建立实例，只需要访问方法
    * 操作静态属性或者方法的方法需要设置为static
      * 举例: `Math`
* **单例（Singleton）设计模式**
  * **设计模式**
    * 其实就是编码套路
  * **单例设计模式**
    * 只能存在一个对象实例
    * 构造器需要权限设置private
    * 不能用new产生对象
    * 内部仍可以产生该类的对象，已达到只有一个对象
    * 只能调用该类的静态方法来返回这个实例
  * **如何实现**
    * 饿汉式
    * 懒汉式
  * **举例**
    ```java
    //饿汉式
    class Bank {
        //1.private constructor
        private Bank() {

        }

        //2.内部创建类的对象,必须静态，不然下面的返回方法返回不了
        private static Bank instance = new Bank();

        //3.提供public static方法，返回类对象
        public static Bank getInstance() {
            return instance;
        }
    }
    //懒汉式
    class Order {
        //1. private constructor
        private Order() {

        }

        //2. 声明当前类对象，null, 必须static
        private Order instance = null;

        //3.声明public、static返回当前类对象的方法
        public static Order getInstance() {
            if (instance == null) { //防止建立多个对象
                instance = new Order();
            }
            return instance
        }
    }
    ```
  * **区分**
    * 懒汉式
      * 延迟对象的创建
      * 线程不安全 -> 多线程时需要加强
    * 饿汉式
      * 加载时间变长
      * 线程安全
  * **好处**
    * 只有一个对象，减少消耗
    * 举例：`Runtime`，网站计数器，应用程序日志应用，数据库连接池，读取配置文件的类，Application，windows的Task manager，windows的recycle bin

## main方法
* main方法是程序入口
* 也是一个普通静态方法
* String[] args
  * 存的都是用户在command line传进去的arguments

## 代码块
* 类的成员之一，也叫初始化块
* **作用**
  * 用来初始化类、对象
* 里面可以有输出语句
* **如果修饰，只能static**
  * 静态代码块
    * 随着类的加载而执行 - 一般执行一次
    * 定义多个代码块，按照声明顺序执行
    * 一定是静态代码块先执行，之后是非静态代码块
    * 只能调用静态属性、方法
    * 作用
      * 初始化类的信息 - 静态属性
  * 非静态代码块
    * 随着对象的创建而执行 - 建一个执行一次
    * 按顺序执行
    * 可以调用各种属性和方法
    * 作用
      * 可以给对象的属性初始化
* **举例**
```java
class Person {
    String name;
    int age;

    public Person() {

    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    //static代码块
    static {
        sout("Hello");
    }

    //非静态代码块
    {
        sout("hello non-static");
    }
}
```
* **属性赋值顺序**
  * 默认初始化
  * 显式初始化 / 代码块中赋值(看顺序)
  * 构造器中赋值
  * 对象.属性方式赋值

## final关键字
* 可用来修饰类、方法、变量
* final类
  * 不能被类继承
  * 里面的方法自动变final，除了字段
  * 如果一个方法没有被覆盖并且很短，编译器能进行优化处理 - inlining内联
  * 举例：`String`, `System`, `StringBuffer`类
* final方法
  * 此方法不能被重写
  * 举例：`Object.getClass()`
* final变量
  * 此变量赋值后不能变了
  * 无法用默认初始化和.属性来赋值
  * 常用于全局常量，并且跟随有static